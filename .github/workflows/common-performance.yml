name: Performance Common

on:
  workflow_call:
    inputs:
      server_public_address:
        description: 'public address for the server'
        type: string
        default: 35.163.142.7
        required: true
      server_private_address:
        description: 'private address for the server'
        type: string
        default: 172.31.38.198
        required: true
      client_listen_address:
        description: 'address for the client to listen on'
        type: string
        default: 192.168.1.21
        required: true
      server_wait_timeout:
        description: 'Server global timeout for tests'
        type: number
        default: 100
        required: false
      connection_delay_ms:
        description: 'connection delay in milliseconds set on the server'
        type: number
        default: 0
        required: false
      connection_delay_device:
        description: 'serverside network device to set delay on'
        type: string
        default: eth0
        required: true
      download_size:
        description: 'Size of the file MB to download'
        type: number
        default: 1
        required: false
      connections_number:
        description: 'Number of concurrent connections to execute'
        type: number
        default: 1
        required: false
      backend:
        description: 'Backend to use: quic-go or quicly-go'
        type: string
        default: 'quic-go'
        required: false
      cca:
        description: 'CCA algorithm to use (if supported by the backend)'
        type: string
        default: 'reno'
        required: false
      slowstart:
        description: 'CC Slowstart algorithm to use (if supported by the backend)'
        type: string
        default: 'basic'
        required: false

jobs:
  build-client:
    runs-on: vm-client
    env:
      GO_VERSION: 1.20.14
      CMAKE_VERSION: '3.22.x'
      GH_TOKEN: ${{ github.token }}
      CACHE_KEY: qpep-${{ github.head_ref || github.ref_name }}-${{ github.sha }}
    steps:
      - name: Install the github cli
        uses: sersoft-gmbh/setup-gh-cli-action@v2
        with:
          version:
            stable

      - name: Restore cached build
        id: cache-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build
          key: ${{ env.CACHE_KEY }}

      - name: Cleanup previous cached build
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        continue-on-error: true
        shell: pwsh
        run: |
          $old_id = @(gh cache list --repo project-faster/qpep --json id,key -q '.[]|select(.key | startswith("qpep-"))|.id' )
          write-host "removing cache # $old_id"
          gh cache delete  --repo project-faster/qpep $old_id

      - name: Cleanup workspace
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          rm ${{ github.workspace }}\* -r -force

      - uses: actions/checkout@v4
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        with:
          clean: true
          submodules: true

      - name: Set up Go
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up CMake
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Prepare
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          New-Item -Path . -Name "build" -ItemType "directory" -Force | Out-Null
          New-Item -Path . -Name "build/config" -ItemType "directory" -Force | Out-Null
          Copy-Item "./docker/client-env/*.pem" "./build"
          Copy-Item "./windivert/x64/*" -Destination "./build"

      - name: Build Client (Backends)
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        shell: cmd
        run: |
          set CGO_ENABLED=1
          set GOOS=windows
          set GOHOSTARCH=amd64
          set GOHOSTOS=windows
          cd backend/
          go generate

      - name: Build Client
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        shell: cmd
        run: |
          set CGO_ENABLED=1
          set GOOS=windows
          set GOHOSTARCH=amd64
          set GOHOSTOS=windows
          go build -v -o build/qpep.exe

      - name: Cache build
        if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/build
          key: ${{ env.CACHE_KEY }}

      - name: Auto-cancel workflow on error
        if: failure()
        uses: andymckay/cancel-action@0.4

  run-client:
    runs-on: vm-client
    needs: [build-client, build-server]
    env:
      GO_VERSION: 1.20.14
      GH_TOKEN: ${{ github.token }}
      CACHE_KEY: qpep-${{ github.head_ref || github.ref_name }}-${{ github.sha }}
      DEST_ARTIFACT: results_client/${{ inputs.backend }}_${{ inputs.cca }}_${{ inputs.slowstart }}_${{ inputs.connection_delay_ms }}ms/
    strategy:
      max-parallel: 1
      matrix:
        download_size: [ 10 ]
        connections_number: [ 1, 4 ]
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true

      - name: Cache build
        id: cache-build
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/build
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Prepare
        shell: pwsh
        run: |
          $config = Get-Content -Path ./docker/client-env/qpep.yml.tpl
          $config = $config.replace('<QPEP_GATEWAY>','${{ inputs.server_public_address }}')
          $config = $config.replace('<QPEP_ADDRESS>','${{ inputs.client_listen_address }}')
          $config = $config.replace('<QPEP_BACKEND>','${{ inputs.backend }}')
          $config = $config.replace('<QPEP_CCA>','${{ inputs.cca }}')
          $config = $config.replace('<QPEP_SLOWSTART>','${{ inputs.slowstart }}')
          $config > ./build/config/qpep.yml
          write-host $config

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare tests reporting
        run: |
          go install github.com/jstemmer/go-junit-report@v1.0.0

      - name: Check configuration
        shell: pwsh
        run: |
          $config = Get-Content -Path ./build/config/qpep.yml
          write-host $config

      - name: Run Client
        shell: cmd
        run: |
          cd build/
          cmd /c "START /b qpep.exe -c"

      - name: Wait Server
        shell: pwsh
        run: |
          $Stoploop = $false
          [ int ]$Retrycount = "20"

           do {
            try {
              Write-Host "Echoing server..."
              Invoke-WebRequest -Uri "http://${{ inputs.server_public_address }}:444/api/v1/server/echo" -UseBasicParsing -TimeoutSec 1
              Write-Host "Job completed"
              $Stoploop = $true
            }
            catch {
              $Retrycount = $Retrycount - 1
              if ($Retrycount -gt 0){
                Start-Sleep -Seconds 2
              }
              else {
                Write-Error "Could not get server after 20 retries." -ErrorAction Stop
              }
            }
          }
          While ($Stoploop -eq $false)

      - name: Run Tests
        shell: cmd
        run: |
          cd docker/speedtests/
          go test speed_test.go -v -c -o speedtests.test

          .\speedtests.test -target_url http://${{ inputs.server_public_address }}:8080/target_${{ matrix.download_size }}M.dat ^
             -expect_mb ${{ matrix.download_size }} -connections_num ${{ matrix.connections_number }} ^
             -test.v -test.timeout 5m > speedtests.out

          go run utils/plotter.go output.csv "Client speed test [Delay:${{ inputs.connection_delay_ms }}ms TargetSize:${{ matrix.download_size }}MB Connections:${{ matrix.connections_number }} Backend:${{ inputs.backend }} CC:${{ inputs.cca }}/${{ inputs.slowstart }}]"

      - name: Stop Client
        if: always()
        shell: pwsh
        run: |
          Get-Process qpep | Stop-Process

      - name: Reset Proxy
        if: always()
        run: |
          go run docker/speedtests/utils/reset_proxy_util.go

      - name: Generate results
        if: always()
        run: |
          Remove-Item -Path ./docker/speedtests/speedtests.test -Force | Out-Null
          New-Item -Path . -Name "${{ env.DEST_ARTIFACT }}" -ItemType "directory" -Force | Out-Null
          Move-Item ${{ github.workspace }}/docker/speedtests/ ${{ env.DEST_ARTIFACT }}/
          Move-Item ${{ github.workspace }}/build/*.log ${{ env.DEST_ARTIFACT }}/

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: client_${{ inputs.backend }}_${{ inputs.cca }}_${{ inputs.slowstart }}_${{ inputs.connection_delay_ms }}ms_${{ matrix.download_size }}MB_${{ matrix.connections_number }}conn
          path: |
            results_client/

      - name: Auto-cancel workflow on error
        if: failure()
        uses: andymckay/cancel-action@0.4

  build-server:
    runs-on: vm-server
    env:
      GO_VERSION: 1.20.14
      CMAKE_VERSION: '3.22.x'
      GH_TOKEN: ${{ github.token }}
      CACHE_KEY: qpep-${{ github.head_ref || github.ref_name }}-${{ github.sha }}
      QPEP_REPO: https://github.com/${{github.repository}}.git
      QPEP_BRANCH: ${{ github.head_ref || github.ref_name }}
      QPEP_REV: ${{ github.sha }}
      QPEP_BACKEND: ${{ inputs.backend }}
      QPEP_CCA: ${{ inputs.cca }}
      QPEP_SLOWSTART: ${{ inputs.slowstart }}
      QPEP_GATEWAY: 127.0.0.1
      QPEP_ADDRESS: 127.0.0.1
    steps:
      - name: Pre-Cleanup
        run: |
          sudo rm -rf docker/server-data-env/output/* || true

      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cleanup all docker
        run: |
          PERC=$(df -l -h / | tail -n1 | cut -d ' ' --fields=16 | sed -s 's/%//')
          if [[ $PERC -gt 90 ]]; then
            echo "Pruning cached docker data"
            docker system prune -af || true
          fi

      - name: Build Server
        run: |
          docker version
          export GO_VERSION=${GO_VERSION}
          export CMAKE_VERSION=${CMAKE_VERSION}
          export GH_TOKEN=${GH_TOKEN}
          export CACHE_KEY=${CACHE_KEY}
          export QPEP_REPO=${QPEP_REPO}
          export QPEP_BRANCH=${QPEP_BRANCH}
          export QPEP_REV=${QPEP_REV}
          export QPEP_CCA=${QPEP_CCA}
          export QPEP_ADDRESS=${QPEP_ADDRESS}
          export QPEP_BACKEND=${QPEP_BACKEND}
          export QPEP_SLOWSTART=${QPEP_SLOWSTART}
          export QPEP_GATEWAY=${QPEP_GATEWAY}
          pushd docker/server-env/
          docker compose build

      - name: Build Data Server
        run: |
          cd docker/server-data-env/
          docker compose build

      - name: Auto-cancel workflow on error
        if: failure()
        uses: andymckay/cancel-action@0.4

  run-server:
    runs-on: vm-server
    needs: [ build-client, build-server ]
    env:
      SERVER_ADDRESS: ${{ inputs.server_private_address }}
      GO_VERSION: 1.20.14
      CMAKE_VERSION: '3.22.x'
      GH_TOKEN: ${{ github.token }}
      CACHE_KEY: qpep-${{ github.head_ref || github.ref_name }}-${{ github.sha }}
      QPEP_REPO: https://github.com/${{github.repository}}.git
      QPEP_BRANCH: ${{ github.head_ref || github.ref_name }}
      QPEP_REV: ${{ github.sha }}
      QPEP_BACKEND: ${{ inputs.backend }}
      QPEP_CCA: ${{ inputs.cca }}
      QPEP_SLOWSTART: ${{ inputs.slowstart }}
      QPEP_GATEWAY: 127.0.0.1
      QPEP_ADDRESS: 127.0.0.1
      DEST_ARTIFACT: results_server/${{ inputs.backend }}_${{ inputs.cca }}_${{ inputs.slowstart }}_${{ inputs.connection_delay_ms }}ms/
    steps:
      - name: Pre-Cleanup
        run: |
          sudo rm -rf docker/server-data-env/output/* || true

      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run data server
        run: |
          cd docker/server-data-env/
          pushd http-data/
          bash gen-local-data.sh
          popd
          docker compose up -d

      - name: Run Server
        run: |
          cd docker/server-env/
          export GO_VERSION="${GO_VERSION}"
          export CMAKE_VERSION="${CMAKE_VERSION}"
          export GH_TOKEN="${GH_TOKEN}"
          export CACHE_KEY="${CACHE_KEY}"
          export QPEP_REPO="${QPEP_REPO}"
          export QPEP_BRANCH="${QPEP_BRANCH}"
          export QPEP_REV="${QPEP_REV}"
          export QPEP_CCA="${QPEP_CCA}"
          export QPEP_ADDRESS="${QPEP_ADDRESS}"
          export QPEP_BACKEND="${QPEP_BACKEND}"
          export QPEP_SLOWSTART="${QPEP_SLOWSTART}"
          export QPEP_GATEWAY=${QPEP_GATEWAY}
          export SERVER_ADDRESS="${SERVER_ADDRESS}"
          docker compose up -d

      - name: Reset connection delay
        run: |
          sudo bash ${{ github.workspace }}/.github/workflows/set_delay_port.sh -d

      - name: Set connection delay
        if: inputs.connection_delay_device > 0
        run: |
          sudo bash ${{ github.workspace }}/.github/workflows/set_delay_port.sh "${{ inputs.connection_delay_ms }}" "${{ inputs.connection_delay_device }}"

      - name: Wait Tests
        timeout-minutes: 60 # max allowed timeouts
        run: |
          # initial wait for server setup
          sleep 60
          
          echo [Starting wait for tests execution...]
          CONN_NUM=1
          RETRIES=${{ inputs.server_wait_timeout }}
          while ! (( RETRIES <= 0 ));
          do
            CONN_NUM=$(curl -s -XGET -H 'Accept:application/json' http://127.0.0.1:444/api/v1/server/echo | jq .total_connections || true)
            echo "Connections alive: $CONN_NUM"
            if (( CONN_NUM <= 0 )); then
              (( RETRIES -= 1 )) || true
            else
              (( RETRIES=${{ inputs.server_wait_timeout }} )) || true
            fi
            echo "$(date +%F_%T.%N): Remaining $RETRIES retries"
            sleep 1
          done
          echo [Wait done]

      - name: Stop Server Container
        if: always()
        run: |
          cd docker/server-env/
          docker logs server-env-server-1 &> test.log || true
          cat test.log || true
          docker compose down -v

      - name: Stop Data Server Container
        if: always()
        run: |
          cd docker/server-data-env/
          docker compose down -v

      - name: Generate results
        if: always()
        run: |
          cd docker/speedtests/
          go run utils/plotter.go ${{ github.workspace }}/docker/server-data-env/output/data.csv "Server speed test [Delay:${{ inputs.connection_delay_ms }}ms Backend:${{ inputs.backend }} CC:${{ inputs.cca }}/${{ inputs.slowstart }}]" "perf-dw-speed"

      - name: Prepare results
        if: always()
        run: |
          mkdir -p ${{ env.DEST_ARTIFACT }}
          sudo cp ${{ github.workspace }}/docker/server-env/*.log ${{ env.DEST_ARTIFACT }}/ || true
          sudo cp ${{ github.workspace }}/build/*.log ${{ env.DEST_ARTIFACT }}/ || true
          sudo cp ${{ github.workspace }}/docker/server-data-env/output/data.csv ${{ env.DEST_ARTIFACT }}/data.csv || true
          sudo cp ${{ github.workspace }}/docker/speedtests/data.png ${{ env.DEST_ARTIFACT }}/data.png || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: server_${{ inputs.backend }}_${{ inputs.cca }}_${{ inputs.slowstart }}_${{ inputs.connection_delay_ms }}ms
          path: |
            results_server/

      - name: Cleanup
        if: always()
        run: |
          sudo bash ${{ github.workspace }}/.github/workflows/set_delay_port.sh -d || true
          sudo rm -rf docker/server-data-env/output/* || true
          sudo rm -rf results_server/

      - name: Auto-cancel workflow on error
        if: failure()
        uses: andymckay/cancel-action@0.3
