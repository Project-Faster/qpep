name: CodeIntegration

on:
  workflow_dispatch:
    inputs:
      skip_docs:
        description: 'skips generation of the documentation'
        type: boolean
        default: false
        required: true
      skip_windows:
        description: 'skips the Windows job'
        type: boolean
        default: false
        required: true
      skip_linux:
        description: 'skips the Linux job'
        type: boolean
        default: false
        required: true
      skip_macos:
        description: 'skips the MacOS job'
        type: boolean
        default: false
        required: true
  push:
    branches: [ "main", "dev-*" ]

run-name: Code Integration [${{ github.event_name }}][${{ github.head_ref || github.ref_name }}] rev.${{ github.sha }}

env:
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  check-diff-files:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      SRC_PATTERN: '\.go|\.c|\.cpp|\.html|\.js|\.h|\.md|\.mod|\.sum'

    outputs:
      source_changed: ${{ github.event_name == 'workflow_dispatch' || steps.check_file_changed.outputs.source_changed == 'true' }}

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true
          fetch-depth: 5

      - name: Check files difference (Push)
        id: check_file_changed
        run: |
          echo ">> Differing source files list ${SRC_PATTERN} <<"
          SRC_DIFF=$(git diff --name-only HEAD^ -- | { grep -E "${SRC_PATTERN}" || true; } | wc -l)
          git diff --name-only HEAD^ -- | { grep -E "${SRC_PATTERN}" || true; }
          echo "---------------------------------"
          if [[ "${SRC_DIFF}" -gt "0" ]]; then
            echo ">> Found differing source files, executing integration workflow"
            echo "source_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo ">> No differing source files, skipping integration workflow"
          echo "source_changed=false" >> $GITHUB_OUTPUT
          exit 0

  docs:
    needs: [ check-diff-files ]
    if: ${{ needs.check-diff-files.outputs.source_changed == 'true' && !inputs.skip_docs }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    env:
      GO_VERSION: 1.20.14
      PANDOC_VERSION: 3.3

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: false

      - name: Install Pandoc
        uses: pandoc/actions/setup@v1.0.0
        with:
          version: ${{ env.PANDOC_VERSION }}

      - name: Install TeXlive
        run: sudo apt-get update && sudo apt-get install texlive-full

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate PDF
        run: |
          cd docs/
          CURDATE=$(date '+%x %T')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -b -8)
          sed -i -E -e "s|subtitle:.+|subtitle: \"User Manual - rev. $SHORT_SHA\"|" -e "s|date:.+|date: \"$CURDATE\"|" user-manual.md
          go generate

      - uses: actions/upload-artifact@v4
        with:
          name: qpep_user_manual
          path: "docs/*.pdf"

  build-mac-os:
    needs: [ check-diff-files ]
    if: ${{ needs.check-diff-files.outputs.source_changed == 'true' && !inputs.skip_macos }}
    runs-on: macos-latest
    env:
      GO_VERSION: 1.20.14
      GOARCH: arm64
      GOOS: darwin
      CGO_ENABLED: 1
      GOPATH: ${{ github.workspace }}/.go
      IGNORE_PACKAGES: 'tray|docker|docs|version|webgui|workers$'
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Prepare
        run: |
          go clean -cache -x
          mkdir -p cover
          mkdir -p report
          mkdir -p unit
          mkdir -p $GOPATH/bin
          pip install dmgbuild

      - name: Build Executable
        run: |
          go build -v -o build/qpep

      - name: Build QPep Tray 64bits
        run: |
          pushd qpep-tray
          go build -v -o ../build/qpep-tray
          popd

      - name: Build MacOS installer
        run: |
          bash ./installer_osx.sh "0.0.0-dev${{github.run_id}}"

      - uses: actions/upload-artifact@v4
        with:
          name: qpep_macos_b${{ github.run_id }}
          path: installer-osx/QPep*.pkg

      - name: Prepare Tests
        run: |
          mkdir -p unit/
          mkdir -p cover/
          mkdir -p report/
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/matm/gocov-html/cmd/gocov-html@v1.2.0
          go install github.com/AlekSi/gocov-xml@v1.1.0

      - name: Test
        run: |
          set -x
          go list ./... | grep -E -v "${IGNORE_PACKAGES}"
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            export WORKSPACE="${{ github.workspace }}"
            go test -v -gcflags=-l -cover -c -o qpep.$(basename $PWD).test > unit_tests.out 2>&1 || true
            ./qpep.$(basename $PWD).test -test.v -test.timeout 5m -test.coverprofile=$WORKSPACE/cover/$(basename $PWD).out >> unit_tests.out 2>&1 || true
            grep -E "PASS|FAIL|SKIP" unit_tests.out || true
            cat unit_tests.out | go-junit-report > $WORKSPACE/unit/$(basename $PWD).xml
            popd
          done
        continue-on-error: true

      - name: Publish Coverage Results
        if: always()
        run: |
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            echo "=== Package $i ==="  >> $GITHUB_STEP_SUMMARY
            gocov convert ${{ github.workspace }}/cover/$(basename $PWD).out | gocov report | grep "Coverage" >> $GITHUB_STEP_SUMMARY || true
            echo >> $GITHUB_STEP_SUMMARY
            gocov convert ${{ github.workspace }}/cover/$(basename $PWD).out | gocov-html > ${{ github.workspace }}/report/$(basename $PWD).html || true
            popd
          done
        continue-on-error: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          check_name: "Unit Tests - MacOS Platform"
          junit_files: "unit/*.xml"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: macos_cover_output
          path: "cover/*.out"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: macos_coverage_report
          path: "report/*.html"

      - name: Fail build on test error
        run: |
          set +e
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            if [ ! -f unit_tests.out ]; then
              exit 1
            fi
            grep -E "FAIL:" unit_tests.out
            if [ $? -eq 0 ]; then
              exit 1
            fi
            popd
          done

  build-linux:
    needs: [ check-diff-files ]
    if: ${{ needs.check-diff-files.outputs.source_changed == 'true' && !inputs.skip_linux }}
    runs-on: ubuntu-22.04
    env:
      GO_VERSION: 1.20.14
      GOARCH: amd64
      GOOS: linux
      CGO_ENABLED: 1
      IGNORE_PACKAGES: 'tray|docker|docs|version|webgui|workers$'
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare
        run: |
          sudo apt update
          sudo apt-get install -y pkg-config libgtk-3-dev libayatana-appindicator-dev
          go clean -cache -x
          mkdir -p cover
          mkdir -p report
          mkdir -p unit
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/matm/gocov-html/cmd/gocov-html@v1.2.0
          go install github.com/AlekSi/gocov-xml@v1.1.0

      - name: Build QPep
        run: |
          go build -v -o build/qpep

      - name: Build QPep Tray
        run: |
          pushd qpep-tray
          go build -o ../build/qpep-tray
          popd

      - uses: actions/upload-artifact@v4
        with:
          name: qpep_linux_b${{ github.run_id }}
          path: build/

      - name: Test
        run: |
          set -x
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            export WORKSPACE="${{ github.workspace }}"
            go test -v -gcflags=-l -cover -c -o qpep.$(basename $PWD).test &> /dev/null || true
            ./qpep.$(basename $PWD).test -test.v -test.timeout 5m -test.coverprofile=$WORKSPACE/cover/$(basename $PWD).out &> unit_tests.out || true
            grep -E "PASS|FAIL|SKIP" unit_tests.out || true
            cat unit_tests.out | go-junit-report > $WORKSPACE/unit/$(basename $PWD).xml
            popd
          done
        continue-on-error: true

      - name: Publish Coverage Results
        if: always()
        run: |
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            echo "=== Package $i ==="  >> $GITHUB_STEP_SUMMARY
            gocov convert ${{ github.workspace }}/cover/$(basename $PWD).out | gocov report | grep "Coverage" >> $GITHUB_STEP_SUMMARY || true
            echo >> $GITHUB_STEP_SUMMARY
            gocov convert ${{ github.workspace }}/cover/$(basename $PWD).out | gocov-html > ${{ github.workspace }}/report/$(basename $PWD).html || true
            popd
          done
        continue-on-error: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "Unit Tests - Linux Platform"
          junit_files: "unit/*.xml"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linux_cover_output
          path: "cover/*.out"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: linux_coverage_report
          path: "report/*.html"

      - name: Fail build on test error
        run: |
          set +e
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            if [ ! -f unit_tests.out ]; then
              exit 1
            fi
            cat unit_tests.out
            grep -E "FAIL:" unit_tests.out
            if [ $? -eq 0 ]; then
              exit 1
            fi
            popd
          done

  build-windows:
    needs: [ check-diff-files ]
    if: ${{ needs.check-diff-files.outputs.source_changed == 'true' && !inputs.skip_windows }}
    runs-on: windows-latest
    env:
      GO_VERSION: 1.20.14
      GOARCH: amd64
      GOOS: windows
      CGO_ENABLED: 1
      QPEP_CI_ENV: 1
      IGNORE_PACKAGES: 'tray|docker|docs|version|webgui|workers$'
      MINGW_BASEDIR: 'C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin'
    defaults:
      run:
        shell: cmd

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Wix
        uses: actions/checkout@v2
        with:
          repository: fbarresi/wix
          path: wix

      - name: Install MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          static: true
          version: 11.1.0

      - name: Prepare
        run: |
          @echo on
          
          MKDIR build
          COPY /Y windivert\LICENSE build\LICENSE.windivert
          COPY /Y LICENSE build\LICENSE
          go clean -cache -x
          COPY /Y windivert\x64\* build\
          COPY /y "%MINGW_BASEDIR%\libgcc_s_seh-1.dll" build\
          COPY /y "%MINGW_BASEDIR%\libwinpthread-1.dll" build\
          COPY /y "%MINGW_BASEDIR%\libstdc++-6.dll" build\

      - name: Build QPep
        run: |
          go build -o build\qpep.exe

      - name: Build QPep Tray
        run: |
          pushd qpep-tray
          set CGO_ENABLED=0
          go build -ldflags -H=windowsgui -o ..\build\qpep-tray.exe
          popd

      - name: Update version QPep Installer
        shell: bash
        run: |
          sed -E 's/Version="[^"]+"/Version="1.0.0.0-dev${{github.run_id}}"/' installer/installer.wxs > temp.wxs
          mv temp.wxs installer/installer.wxs
          sed -E 's/FileVersion:\s*"[^"]+"/FileVersion:\s*"0.0.0-dev${{github.run_id}}"/' shared/version/versioninfo.json > temp.json
          mv temp.json shared/version/versioninfo.json
          sed -E 's/ProductVersion:\s*"[^"]+"/ProductVersion:\s*"0.0.0-dev${{github.run_id}}"/' shared/version/versioninfo.json > temp.json
          mv temp.json shared/version/versioninfo.json

      - name: Build QPep Installer
        run: |
          set PATH=${{ github.workspace }}\wix\tools;%PATH%
          msbuild installer\installer.sln

      - uses: actions/upload-artifact@v4
        with:
          name: qpep_windows_b${{ github.run_id }}
          path: build/installer.msi

      - name: Prepare Tests
        run: |
          MKDIR unit
          MKDIR cover
          MKDIR report
          go install github.com/jstemmer/go-junit-report/v2@v2.1.0
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/matm/gocov-html/cmd/gocov-html@v1.2.0
          go install github.com/AlekSi/gocov-xml@v1.1.0

      - name: Test
        shell: bash
        run: |
          export WORKSPACE=$( echo "${{ github.workspace }}" | sed -e 's|\\|/|g' )
          go generate github.com/Project-Faster/qpep/windivert
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            cp -r $WORKSPACE/windivert/x64/* .
            go test -v -gcflags=-l -cover -c -o qpep.$(basename $PWD).test > unit_tests.out 2>&1 || true
            ./qpep.$(basename $PWD).test -test.v -test.timeout 5m -test.coverprofile=$WORKSPACE/cover/$(basename $PWD).out >> unit_tests.out 2>&1 || true
            grep -E "PASS|FAIL|SKIP" unit_tests.out || true
            cat unit_tests.out | go-junit-report > $WORKSPACE/unit/$(basename $PWD).xml
            popd
          done
        continue-on-error: true

      - name: Publish Coverage Results
        shell: bash
        if: always()
        run: |
          export WORKSPACE=$( echo "${{ github.workspace }}" | sed -e 's|\\|/|g' )
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            echo "=== Package $i ==="  >> $GITHUB_STEP_SUMMARY
            gocov convert $WORKSPACE/cover/$(basename $PWD).out | gocov report | grep "Coverage" >> $GITHUB_STEP_SUMMARY || true
            echo >> $GITHUB_STEP_SUMMARY
            gocov convert $WORKSPACE/cover/$(basename $PWD).out | gocov-html > $WORKSPACE/report/$(basename $PWD).html || true
            popd
          done
        continue-on-error: true

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
          check_name: "Unit Tests - Windows Platform"
          junit_files: "unit/*.xml"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: windows_coverage_output
          path: cover/*.out

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: windows_coverage_report
          path: report/*.html

      - name: Fail build on test error
        shell: bash
        run: |
          set +e
          for i in $(go list ./... | grep -E -v "${IGNORE_PACKAGES}" | sed -n -e 's|github.com\/Project-Faster\/qpep\/||p')
          do
            pushd $i
            if [ ! -f unit_tests.out ]; then
              exit 1
            fi
            cat unit_tests.out
            grep -E "FAIL:" unit_tests.out
            if [ $? -eq 0 ]; then
              exit 1
            fi
            popd
          done
