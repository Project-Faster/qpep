name: Release

on:
  workflow_dispatch:
    inputs:
      test_release:
            description: 'Draft Release'
            required: true
            type: boolean
            default: true
      x86_version:
            description: 'Create x86 version'
            type: boolean
            default: false
      version_tag:
            description: 'Version tag'
            type: 'string'
            required: true
            default: '0.0.1'

jobs:
  check-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        
    steps:
      - name: Check release
        run: |
           if [[ `git tag | grep v${{ github.event.inputs.version_tag }} | wc -l` != 0 ]]; then
              exit 1
           fi

  build-linux:
    needs: check-release
    runs-on: ubuntu-latest
    defaults:
      run: 
        shell: bash
        
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.16
        
    - name: Prepare
      run: mkdir build
        
    - name: Test
      run: |
        set GOARCH=amd64
        set GOOS=linux
        set CGO_ENABLED=0
        go test -v ./...
      continue-on-error: true
      
    - name: Build x64
      run: |
        set GOARCH=amd64
        set GOOS=linux
        set CGO_ENABLED=1
        go clean -cache
        go build -v -o build/qpep
      
    - uses: actions/upload-artifact@v3
      with:
        name: qpep_linux_b${{ github.run_id }}
        path: build/qpep

  build-windows:
    needs: check-release
    runs-on: windows-latest
    defaults:
      run: 
        shell: cmd
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.16
        
    - name: Test
      run: |
        set GOARCH=amd64
        set GOOS=windows
        set CGO_ENABLED=1
        go test -v ./...
      continue-on-error: true
      
    - uses: actions/checkout@v2
    - name: Install Wix
      uses: actions/checkout@v2
      with:
        repository: fbarresi/wix
        path: wix

    - name: Install MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Prepare
      run: |
           MKDIR build
           MKDIR build\x64
           MKDIR build\x86
           COPY /Y windivert\LICENSE build\LICENSE.windivert
           COPY /Y LICENSE build\LICENSE
           set GOARCH=amd64
           go clean -cache
           set GOARCH=386
           go clean -cache
           COPY /Y windivert\x64\* build\x64
           
    - name: Build QPep x64
      run: |
           set GOARCH=amd64
           set CGO_ENABLED=1
           go build -o build\x64\qpep.exe
           
    - name: Build QPep Tray x64
      run: |
           pushd qpep-tray
           set GOARCH=amd64
           set GOOS=windows
           set CGO_ENABLED=0
           go build -ldflags -H=windowsgui -o ..\build\x86\qpep-tray.exe
           popd
           
    - if: ${{ github.event.inputs.x86_version == true }}
      name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x86
        
    - if: ${{ github.event.inputs.x86_version == true }}
      name: Build QPep x86
      run: |
           set GOARCH=386
           set GOOS=windows
           set CGO_ENABLED=1
           go build -o build\x64\qpep.exe
           
    - if: ${{ github.event.inputs.x86_version == true }}
      name: Build QPep Tray x86
      run: |
           pushd qpep-tray
           set GOARCH=386
           set GOOS=windows
           set CGO_ENABLED=0
           go build -ldflags -H=windowsgui -o ..\build\x86\qpep-tray.exe
           popd
      
    - name: Build QPep Installer
      run: |
           set PATH=${{ github.workspace }}\wix\tools;%PATH%
           msbuild installer\installer.sln
   
    - uses: actions/upload-artifact@v3
      with:
        name: qpep_windows_b${{ github.run_id }}
        path: build/installer.msi

  create-release-tag:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    defaults:
      run: 
        shell: bash
        
    steps:
      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version_tag }}
          release_name: Release v${{ github.event.inputs.version_tag }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: ${{ github.event.inputs.test_release == true }}
          prerelease: false
          
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: qpep_windows_b${{ github.run_id }}
      
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: qpep_linux_b${{ github.run_id }}
      
      - name: List
        run: |
           cd ${{ github.workspace }}
        
      - name: Attach Windows Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/installer.msi
          asset_name: qpep_windows_b${{ github.run_id }}
          asset_content_type: application/zip
          
      - name: Attach Linux Release Asset
        id: upload-linux-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/qpep
          asset_name: qpep_linux_b${{ github.run_id }}
          asset_content_type: application/zip
          
